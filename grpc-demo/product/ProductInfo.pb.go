// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ProductInfo.proto

/*
Package product is a generated protocol buffer package.

It is generated from these files:
	ProductInfo.proto

It has these top-level messages:
	Product
	ProductId
*/
package product

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Product struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ProductId struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *ProductId) Reset()                    { *m = ProductId{} }
func (m *ProductId) String() string            { return proto.CompactTextString(m) }
func (*ProductId) ProtoMessage()               {}
func (*ProductId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProductId) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Product)(nil), "product.Product")
	proto.RegisterType((*ProductId)(nil), "product.ProductId")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProductInfo service

type ProductInfoClient interface {
	// 添加商品
	AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductId, error)
	// 获取商品
	GetProduct(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*Product, error)
}

type productInfoClient struct {
	cc *grpc.ClientConn
}

func NewProductInfoClient(cc *grpc.ClientConn) ProductInfoClient {
	return &productInfoClient{cc}
}

func (c *productInfoClient) AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductId, error) {
	out := new(ProductId)
	err := grpc.Invoke(ctx, "/product.ProductInfo/addProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInfoClient) GetProduct(ctx context.Context, in *ProductId, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/product.ProductInfo/getProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductInfo service

type ProductInfoServer interface {
	// 添加商品
	AddProduct(context.Context, *Product) (*ProductId, error)
	// 获取商品
	GetProduct(context.Context, *ProductId) (*Product, error)
}

func RegisterProductInfoServer(s *grpc.Server, srv ProductInfoServer) {
	s.RegisterService(&_ProductInfo_serviceDesc, srv)
}

func _ProductInfo_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInfoServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductInfo/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInfoServer).AddProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInfo_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInfoServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductInfo/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInfoServer).GetProduct(ctx, req.(*ProductId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductInfo",
	HandlerType: (*ProductInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addProduct",
			Handler:    _ProductInfo_AddProduct_Handler,
		},
		{
			MethodName: "getProduct",
			Handler:    _ProductInfo_GetProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProductInfo.proto",
}

func init() { proto.RegisterFile("ProductInfo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x0c, 0x28, 0xca, 0x4f,
	0x29, 0x4d, 0x2e, 0xf1, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f,
	0x80, 0x08, 0x29, 0xf9, 0x73, 0xb1, 0x43, 0x65, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x32, 0x53, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53,
	0x25, 0x98, 0xc0, 0x22, 0x60, 0xb6, 0x90, 0x02, 0x17, 0x77, 0x4a, 0x6a, 0x71, 0x72, 0x51, 0x66,
	0x41, 0x49, 0x66, 0x7e, 0x9e, 0x04, 0x33, 0x58, 0x0a, 0x59, 0x48, 0x49, 0x91, 0x8b, 0x13, 0x66,
	0x5d, 0x8a, 0x90, 0x08, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0x2a, 0xd4, 0x54, 0x08, 0xc7, 0xa8,
	0x94, 0x8b, 0x1b, 0xc9, 0x45, 0x42, 0x46, 0x5c, 0x5c, 0x89, 0x29, 0x29, 0x30, 0x57, 0x08, 0xe8,
	0x41, 0x9d, 0xa6, 0x07, 0x15, 0x91, 0x12, 0x42, 0x17, 0xf1, 0x4c, 0x01, 0xe9, 0x49, 0x4f, 0x2d,
	0x81, 0xe9, 0xc1, 0xa2, 0x42, 0x0a, 0xc3, 0x9c, 0x24, 0x36, 0xb0, 0xd7, 0x8d, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xc4, 0x7d, 0x77, 0xf5, 0x0f, 0x01, 0x00, 0x00,
}
